import os
import random
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import time
import logging
import traceback
import sys


class Bot:
    VOLUNTEER_GROUPS = {'–ê', '–ë', '–í'}
    GROUP_TO_CONDITION = {
        '–ê': 'condition1',
        '–ë': 'condition2',
        '–í': 'condition3'
    }
    ANIMALS = [
        "–õ–∏—Å–∞", "–í–æ–ª–∫", "–ú–µ–¥–≤–µ–¥—å", "–ó–∞—è—Ü", "–û–ª–µ–Ω—å", "–õ–æ—Å—å", "–ï–Ω–æ—Ç", "–ë–∞—Ä—Å—É–∫", 
        "–ë–µ–ª–∫–∞", "–Å–∂", "–†—ã—Å—å", "–ë–æ–±—Ä", "–í—ã–¥—Ä–∞", "–ö—É–Ω–∏—Ü–∞", "–°–æ–±–æ–ª—å", "–•–æ—Ä—ë–∫",
        "–õ–∞—Å–∫–∞", "–†–æ—Å–æ–º–∞—Ö–∞", "–ü–µ—Å–µ—Ü", "–ë—É—Ä—É–Ω–¥—É–∫"
    ]
    MAP_DOT ={
        '–ê–∫—Ç1': 'https://yandex.ru/maps/-/CHVGFPpk',
        '–ê–∫—Ç2': 'https://yandex.ru/maps/-/CHVGFTn4',
        '–ê–∫—Ç3': 'https://yandex.ru/maps/-/CHVGFT~V'
    }
    MAP_DOT_NAME ={
        '–ê–∫—Ç1': '–ì–ª–∞–≤–Ω–∞—è –°—Ü–µ–Ω–∞',
        '–ê–∫—Ç2': '–°–∫–µ–π—Ç –ü–∞—Ä–∫',
        '–ê–∫—Ç3': '–ú–∞–ª–∞—è –°—Ü–µ–Ω–∞'
    }

    def __init__(self):
        self.token = self.get_token()
        self.init_db()
        self.message_id = None

    def get_token(self):
        try:
            with open('token.txt', 'r') as file:
                return file.read().strip()
        except FileNotFoundError:
            print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            exit(1)

    def init_db(self):
        with sqlite3.connect('bot_database.db') as conn:
            cursor = conn.cursor()
            cursor.executescript('''
                CREATE TABLE IF NOT EXISTS Users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_id INTEGER UNIQUE NOT NULL,
                    username TEXT NOT NULL,
                    telegram_tag TEXT,
                    unique_code TEXT UNIQUE,
                    animal_code TEXT,
                    role TEXT CHECK(role IN ('–í–æ–ª–æ–Ω—Ç—ë—Ä', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')) DEFAULT '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    full_name TEXT -- –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–ø–∏—Å—å –§–ò–û
                );
                CREATE TABLE IF NOT EXISTS VolunteerGroups (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    volunteer_group TEXT NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES Users(id)
                );
                CREATE TABLE IF NOT EXISTS SystemActions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    author_id INTEGER,
                    action TEXT NOT NULL,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (author_id) REFERENCES Users(id)
                );
                CREATE TABLE IF NOT EXISTS ContestLogs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_tag TEXT,
                    animal_code TEXT,
                    condition1 BOOLEAN DEFAULT FALSE,
                    condition2 BOOLEAN DEFAULT FALSE,
                    condition3 BOOLEAN DEFAULT FALSE
                );
                CREATE TABLE IF NOT EXISTS UserMainMessages (
                    telegram_id INTEGER PRIMARY KEY,
                    main_message_id INTEGER NOT NULL,
                    map_message_id INTEGER,
                    event_message_id INTEGER
                );
            ''')
            conn.commit()

    def crd_msg(self, conditions):
        links = '\n'
        for idx, condition in enumerate(conditions, start=1):
            if condition == 0:
                name = self.MAP_DOT_NAME[f'–ê–∫—Ç{idx}']
                url = self.MAP_DOT[f'–ê–∫—Ç{idx}']
                links += f"<b>{name}</b> {'-'*idx} <a href='{url}'>–ü–æ–∫–∞–∑–∞—Ç—å</a>\n"
        
        msg = f"üó∫ <b>–ö–∞—Ä—Ç–∞ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏:</b>\n{links}"
        return msg

    def welc_msg(self, animal_code, unique_code):
        msg = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!\n\n"
            f"üè∑ –í–∞—à –ø–æ–∑—ã–≤–Ω–æ–π: {animal_code if animal_code else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
            f"üî¢ –í–∞—à –∫–æ–¥: {unique_code if unique_code else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}"
        )
        return msg

    def standardize_call_sign(self, call_sign):
        return call_sign.lower().replace("—ë", "–µ")

    def generate_animal_code(self):
        with sqlite3.connect('bot_database.db') as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT animal_code FROM ContestLogs WHERE animal_code IS NOT NULL')
            existing_codes = {code[0] for code in cursor.fetchall() if code[0]}
            counter = 1
            while True:
                animal = random.choice(self.ANIMALS)
                new_code = f"{animal}#{counter}"
                new_code = self.standardize_call_sign(new_code)
                if new_code not in existing_codes:
                    return new_code
                counter += 1

    def get_activity_name(self, condition_field: str) -> str:
        try:
            condition_number = int(condition_field[-1])
            return self.MAP_DOT_NAME.get(f'–ê–∫—Ç{condition_number}', f'–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {condition_number}')
        except (ValueError, IndexError):
            return condition_field

    def generate_unique_code(self):
        return ''.join(random.choices('0123456789', k=5))

    def add_user(self, telegram_id, username, telegram_tag=None, role='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', full_name=None):
        with sqlite3.connect('bot_database.db') as conn:
            cursor = conn.cursor()
            if telegram_tag is None:
                telegram_tag = f"@{username}" if username else None
            unique_code = self.generate_unique_code()
            animal_code = self.generate_animal_code()
            cursor.execute('''
                INSERT OR IGNORE INTO Users (telegram_id, username, telegram_tag, unique_code, animal_code, role, full_name)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (telegram_id, username, telegram_tag, unique_code, animal_code, role, full_name))
            user_id = cursor.lastrowid or cursor.execute(
                'SELECT id FROM Users WHERE telegram_id = ?',
                (telegram_id,)
            ).fetchone()[0]
            
            cursor.execute('SELECT 1 FROM ContestLogs WHERE telegram_tag = ?', (telegram_tag,))
            if cursor.fetchone() is None:
                cursor.execute('''
                    INSERT INTO ContestLogs 
                    (telegram_tag, animal_code, condition1, condition2, condition3)
                    VALUES (?, ?, 0, 0, 0)
                ''', (telegram_tag, animal_code))
            
            conn.commit()
            return user_id

    def get_user_role(self, telegram_id):
        with sqlite3.connect('bot_database.db') as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT role FROM Users WHERE telegram_id = ?', (telegram_id,))
            result = cursor.fetchone()
            return result[0] if result else None

    def log_action(self, telegram_id, action):
        with sqlite3.connect('bot_database.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO SystemActions (author_id, action)
                SELECT id, ? FROM Users WHERE telegram_id = ?
            ''', (action, telegram_id))
            conn.commit()
    

    def get_contest_stats(self):
        with sqlite3.connect('bot_database.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id,
                       (condition1 + condition2 + condition3) as completed_conditions
                FROM ContestLogs
                ORDER BY completed_conditions DESC
                LIMIT 10
            ''')
            return cursor.fetchall()

    async def safe_edit_message(self, context, chat_id, message_id, text, reply_markup=None, parse_mode=None):
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        except Exception as e:
            if "Message is not modified" not in str(e):
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        telegram_tag = f"@{username}" if username else None

        self.add_user(user_id, username, telegram_tag)
        self.log_action(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
        
        with sqlite3.connect('bot_database.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT cl.animal_code, u.unique_code, cl.condition1, cl.condition2, cl.condition3 
                FROM ContestLogs cl
                JOIN Users u ON u.telegram_tag = cl.telegram_tag
                WHERE u.telegram_id = ?
            ''', (user_id,))
            animal_code, unique_code, *conditions = cursor.fetchone()

        welcome_message = self.welc_msg(animal_code, unique_code)
        
        role = self.get_user_role(user_id)
        buttons = [
            [InlineKeyboardButton("–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", callback_data='get_event1')],
        ]

        if role == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
            buttons.append([InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data='show_status')])

        if sum(conditions) < 3 and role != '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä' and role != '–í–æ–ª–æ–Ω—Ç—ë—Ä':
            buttons.append([InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data='get_map')])
            completed_conditions = sum(conditions)
            if completed_conditions == 3:
                progress_msg = "\nüéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            else:
                progress_msg = f"\nüéà –í—ã –ø—Ä–æ—à–ª–∏ {completed_conditions} –∏–∑ 3 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π."
            welcome_message += progress_msg
        
        
        if role == '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä':
            buttons.append([InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='get_stat')])
            buttons.append([InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤", callback_data='show_volunteers')])
            buttons.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞", callback_data='add_volunteer')])
            buttons.append([InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å —É—Å–ª–æ–≤–∏–µ", callback_data='mark_condition')])
            buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É", callback_data='unmark_condition')])
        elif role == '–í–æ–ª–æ–Ω—Ç—ë—Ä':
            buttons.append([InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å —É—Å–ª–æ–≤–∏–µ", callback_data='mark_condition')])
            buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É", callback_data='unmark_condition')])

        reply_markup = InlineKeyboardMarkup(buttons)
        message = await update.message.reply_text(welcome_message, reply_markup=reply_markup)
        
        with sqlite3.connect('bot_database.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO UserMainMessages (telegram_id, main_message_id)
                VALUES (?, ?)
            ''', (user_id, message.message_id))
            conn.commit()

        try:
            await update.message.delete()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")

    async def handle_volunteer_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        chat_id = update.message.chat.id
        search_query = self.standardize_call_sign(update.message.text.strip())
        main_message_id = self.get_main_message_id(user_id)

        if len(search_query) < 2:
            return

        role = self.get_user_role(user_id)
        if role != '–í–æ–ª–æ–Ω—Ç—ë—Ä':
            return

        try:
            with sqlite3.connect('bot_database.db') as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT vg.volunteer_group 
                    FROM VolunteerGroups vg
                    JOIN Users u ON u.id = vg.user_id
                    WHERE u.telegram_id = ?
                ''', (user_id,))
                volunteer_group = cursor.fetchone()

                if not volunteer_group:
                    return
                
                volunteer_group = volunteer_group[0]
                condition_field = self.GROUP_TO_CONDITION[volunteer_group]

                cursor.execute(f'''
                    SELECT u.unique_code, u.animal_code, cl.{condition_field}, u.telegram_tag
                    FROM Users u
                    LEFT JOIN ContestLogs cl ON u.telegram_tag = cl.telegram_tag
                    WHERE LOWER(u.unique_code) LIKE ? OR LOWER(u.animal_code) LIKE ?
                    LIMIT 5
                ''', (f'%{search_query}%', f'%{search_query}%'))
                
                matches = cursor.fetchall()

            if not matches:
                buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
                reply_markup = InlineKeyboardMarkup(buttons)
                await self.safe_edit_message(
                    context,
                    chat_id,
                    main_message_id,
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                    reply_markup
                )
                return

            buttons = []
            for unique_code, animal_code, is_marked, telegram_tag in matches:
                status = "‚úÖ" if is_marked else "‚ùå"
                display_text = f"{status} {animal_code} ({unique_code})"
                
                if is_marked:
                    callback_data = f"unmark_user_{condition_field}_{unique_code}_{telegram_tag}"
                else:
                    callback_data = f"mark_user_{unique_code}"
                    
                buttons.append([InlineKeyboardButton(display_text, callback_data=callback_data)])

            buttons.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')])
            reply_markup = InlineKeyboardMarkup(buttons)

            await self.safe_edit_message(
                context,
                chat_id,
                main_message_id,
                "üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n‚ùå - –Ω–µ –æ—Ç–º–µ—á–µ–Ω\n‚úÖ - –æ—Ç–º–µ—á–µ–Ω",
                reply_markup
            )

            try:
                await update.message.delete()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º: {e}")

        except Exception as e:
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await self.safe_edit_message(
                context,
                chat_id,
                main_message_id,
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}",
                reply_markup
            )

    async def handle_mark_user_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, unique_code: str):
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        main_message_id = self.get_main_message_id(user_id)

        try:
            with sqlite3.connect('bot_database.db') as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT vg.volunteer_group 
                    FROM VolunteerGroups vg
                    JOIN Users u ON u.id = vg.user_id
                    WHERE u.telegram_id = ?
                ''', (user_id,))
                volunteer_group = cursor.fetchone()

                if not volunteer_group:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return

                volunteer_group = volunteer_group[0]
                condition_field = self.GROUP_TO_CONDITION[volunteer_group]

                cursor.execute(f'''
                    UPDATE ContestLogs 
                    SET {condition_field} = 1
                    WHERE telegram_tag = (
                        SELECT telegram_tag 
                        FROM Users 
                        WHERE unique_code = ?
                    )
                ''', (unique_code,))
                
                cursor.execute('''
                    SELECT animal_code, telegram_tag
                    FROM Users 
                    WHERE unique_code = ?
                ''', (unique_code,))
                result = cursor.fetchone()
                animal_code = result[0]
                telegram_tag = result[1]
                
                conn.commit()

            self.log_action(
                user_id,
                f"–í–æ–ª–æ–Ω—Ç—ë—Ä –æ—Ç–º–µ—Ç–∏–ª {condition_field} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {animal_code} ({unique_code})"
            )

            buttons = [
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ—Ç–∫–∏", callback_data=f'cancel_mark_condition_{condition_field}_{unique_code}_{telegram_tag}')]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)

            activity_name = self.get_activity_name(condition_field)
            await self.safe_edit_message(
                context,
                chat_id,
                main_message_id,
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ¬´{activity_name}¬ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {animal_code} ({unique_code})",
                reply_markup
            )

        except Exception as e:
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await self.safe_edit_message(
                context,
                chat_id,
                main_message_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É—Å–ª–æ–≤–∏—è: {str(e)}",
                reply_markup
            )

    async def unmark_condition_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
        reply_markup = InlineKeyboardMarkup(buttons)
        main_message_id = self.get_main_message_id(user_id)
        
        if not main_message_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return
        
        role = self.get_user_role(user_id)
        if role not in ['–í–æ–ª–æ–Ω—Ç—ë—Ä', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä']:
            await self.safe_edit_message(
                context,
                update.effective_chat.id,
                main_message_id,
                "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.",
                reply_markup
            )
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")
            return

        if role == '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä' and len(context.args) != 2:
            await self.safe_edit_message(
                context,
                update.effective_chat.id,
                main_message_id,
                (
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/unmark &lt;–∫–æ–¥ –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π&gt; &lt;–≥—Ä—É–ø–ø–∞&gt;</code>\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {', '.join(sorted(self.VOLUNTEER_GROUPS))}\n"
                    "–ü—Ä–∏–º–µ—Ä: <code>/unmark –õ–∏—Å–∞#1 –ê</code>"
                ),
                reply_markup,
                parse_mode="HTML"
                            )
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")
            return
        elif role == '–í–æ–ª–æ–Ω—Ç—ë—Ä' and len(context.args) != 1:
            await self.safe_edit_message(
                context,
                update.effective_chat.id,
                main_message_id,
                (
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/unmark &lt;–∫–æ–¥ –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π&gt;</code>\n"
                    "–ü—Ä–∏–º–µ—Ä: <code>/unmark –õ–∏—Å–∞#1</code>"
                ),
                reply_markup,
                parse_mode="HTML"
            )
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")
            return

        try:
            target_code_or_call_sign = self.standardize_call_sign(context.args[0])

            with sqlite3.connect('bot_database.db') as conn:
                cursor = conn.cursor()
                
                if role == '–í–æ–ª–æ–Ω—Ç—ë—Ä':
                    cursor.execute('''
                        SELECT vg.volunteer_group 
                        FROM VolunteerGroups vg
                        JOIN Users u ON u.id = vg.user_id
                        WHERE u.telegram_id = ?
                    ''', (user_id,))
                    volunteer_group = cursor.fetchone()
                    
                    if not volunteer_group:
                        await self.safe_edit_message(
                            context,
                            update.effective_chat.id,
                            main_message_id,
                            "‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                            reply_markup,
                            parse_mode="HTML"
                        )
                        return
                    
                    volunteer_group = volunteer_group[0]
                    condition_field = self.GROUP_TO_CONDITION[volunteer_group]
                else:
                    volunteer_group = context.args[1].upper()
                    if volunteer_group not in self.VOLUNTEER_GROUPS:
                        await self.safe_edit_message(
                            context,
                            update.effective_chat.id,
                            main_message_id,
                            f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {', '.join(sorted(self.VOLUNTEER_GROUPS))}",
                            reply_markup,
                            parse_mode="HTML"
                        )
                        return
                    condition_field = self.GROUP_TO_CONDITION[volunteer_group]

                cursor.execute('''
                    SELECT u.telegram_tag, u.animal_code
                    FROM Users u
                    WHERE LOWER(u.unique_code) = LOWER(?) OR LOWER(u.animal_code) = LOWER(?)
                ''', (target_code_or_call_sign, target_code_or_call_sign))
                
                user_data = cursor.fetchone()
                if not user_data:
                    await self.safe_edit_message(
                        context,
                        update.effective_chat.id,
                        main_message_id,
                        "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        reply_markup,
                        parse_mode="HTML"
                    )
                    return

                telegram_tag, animal_code = user_data

                cursor.execute(f'''
                    UPDATE ContestLogs 
                    SET {condition_field} = 0
                    WHERE telegram_tag = ?
                ''', (telegram_tag,))
                
                conn.commit()

                self.log_action(
                    user_id,
                    f"{role} –æ—Ç–º–µ–Ω–∏–ª –æ—Ç–º–µ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ¬´{self.get_activity_name(condition_field)}¬ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_code_or_call_sign}"
                )

            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            
            activity_name = self.get_activity_name(condition_field)
            await self.safe_edit_message(
                context,
                update.effective_chat.id,
                main_message_id,
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ¬´{activity_name}¬ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {animal_code}",
                reply_markup,
                parse_mode="HTML"
            )

        except Exception as e:
            await self.safe_edit_message(
                context,
                update.effective_chat.id,
                main_message_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ç–º–µ—Ç–∫–∏: {str(e)}",
                reply_markup,
                parse_mode="HTML"
            )

        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")

    async def handle_unmark_user_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        main_message_id = self.get_main_message_id(user_id)

        try:
            parts = data.split('_')
            condition_field = parts[0]
            unique_code = parts[1]
            telegram_tag = '_'.join(parts[2:])

            with sqlite3.connect('bot_database.db') as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT animal_code
                    FROM Users 
                    WHERE unique_code = ?
                ''', (unique_code,))
                result = cursor.fetchone()
                
                if not result:
                    await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                    
                animal_code = result[0]
                
                cursor.execute(f'''
                    UPDATE ContestLogs 
                    SET {condition_field} = 0
                    WHERE telegram_tag = ?
                ''', (telegram_tag,))
                
                conn.commit()

            self.log_action(
                user_id,
                f"–û—Ç–º–µ–Ω–µ–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ {condition_field} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {animal_code} ({unique_code})"
            )

            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)

            activity_name = self.get_activity_name(condition_field)
            await self.safe_edit_message(
                context,
                chat_id,
                main_message_id,
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ¬´{activity_name}¬ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {animal_code}",
                reply_markup,
                parse_mode="HTML"
            )

        except Exception as e:
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await self.safe_edit_message(
                context,
                chat_id,
                main_message_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ç–º–µ—Ç–∫–∏: {str(e)}",
                reply_markup
            )

    def get_main_message_id(self, user_id):
        with sqlite3.connect('bot_database.db') as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT main_message_id FROM UserMainMessages WHERE telegram_id = ?', (user_id,))
            result = cursor.fetchone()
            return result[0] if result else None

    async def cancel_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE, action_type: str):
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        
        if self.get_user_role(user_id) not in ['–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä', '–í–æ–ª–æ–Ω—Ç—ë—Ä']:
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
                reply_markup=reply_markup
            )
            return

        try:
            callback_data = query.data
            if '_' in callback_data and 'condition' in callback_data:
                parts = callback_data.split('_')
                if len(parts) >= 5:
                    condition = parts[3]
                    unique_code = parts[4]
                    telegram_tag = '_'.join(parts[5:])
                    
                    activity_name = self.get_activity_name(condition)
                    
                    with sqlite3.connect('bot_database.db') as conn:
                        cursor = conn.cursor()
                        cursor.execute(f'''
                            UPDATE ContestLogs 
                            SET {condition} = 0
                            WHERE telegram_tag = ?
                        ''', (telegram_tag,))
                        conn.commit()
                        
                    self.log_action(user_id, f"–û—Ç–º–µ–Ω–µ–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ¬´{activity_name}¬ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {unique_code}")
            else:
                message_text = query.message.text
                if action_type == 'mark':
                    if "—É—Å–ª–æ–≤–∏–µ" in message_text:
                        parts = message_text.split("—É—Å–ª–æ–≤–∏–µ ")
                        if len(parts) > 1:
                            condition = parts[1].split(" –¥–ª—è")[0]
                            user_info = parts[1].split("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ")[1]
                            
                            with sqlite3.connect('bot_database.db') as conn:
                                cursor = conn.cursor()
                                cursor.execute(f'''
                                    UPDATE ContestLogs 
                                    SET {condition} = 0
                                    WHERE telegram_tag = (
                                        SELECT telegram_tag 
                                        FROM Users 
                                        WHERE LOWER(unique_code) = LOWER(?) OR LOWER(animal_code) = LOWER(?)
                                    )
                                ''', (user_info, user_info))
                                conn.commit()
                                
                            self.log_action(user_id, f"–û—Ç–º–µ–Ω–µ–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ {condition} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}")
                
                elif action_type == 'add_volunteer':
                    if "–ö–æ–¥ –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π:" in message_text:
                        code_line = [line for line in message_text.split('\n') if "–ö–æ–¥ –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π:" in line][0]
                        group_line = [line for line in message_text.split('\n') if "–ì—Ä—É–ø–ø–∞:" in line][0]
                        
                        volunteer_code = code_line.split(": ")[1]
                        volunteer_group = group_line.split(": ")[1]
                        
                        with sqlite3.connect('bot_database.db') as conn:
                            cursor = conn.cursor()
                            cursor.execute('''
                                SELECT id 
                                FROM Users 
                                WHERE LOWER(unique_code) = LOWER(?) OR LOWER(animal_code) = LOWER(?)
                            ''', (volunteer_code, volunteer_code))
                            user_data = cursor.fetchone()
                            
                            if user_data:
                                cursor.execute('DELETE FROM VolunteerGroups WHERE user_id = ?', (user_data[0],))
                                cursor.execute('''
                                    UPDATE Users 
                                    SET role = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                                    WHERE id = ?
                                ''', (user_data[0],))
                                conn.commit()
                                
                            self.log_action(user_id, f"–û—Ç–º–µ–Ω–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞ {volunteer_code} –≤ –≥—Ä—É–ø–ø—É {volunteer_group}")

            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(
                "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=reply_markup
            )

        except Exception as e:
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è: {str(e)}",
                reply_markup=reply_markup
            )

    async def show_user_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        main_message_id = self.get_main_message_id(user_id)

        buttons = [
            [InlineKeyboardButton("üó∫ –ö–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π", callback_data='get_map')],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)

        try:
            with sqlite3.connect('bot_database.db') as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT cl.condition1, cl.condition2, cl.condition3,
                           u.animal_code, u.unique_code
                    FROM ContestLogs cl
                    JOIN Users u ON u.telegram_tag = cl.telegram_tag
                    WHERE u.telegram_id = ?
                ''', (user_id,))
                result = cursor.fetchone()

                if not result:
                    await self.safe_edit_message(
                        context,
                        chat_id,
                        main_message_id,
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.",
                        reply_markup
                    )
                    return

                conditions = result[:3]
                animal_code = result[3]
                unique_code = result[4]

                completed = sum(conditions)
                
                status_message = "‚ú® <b>–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>\n\n"
                status_message += f"üè∑ –ü–æ–∑—ã–≤–Ω–æ–π: <code>{animal_code}</code>\n"
                status_message += f"üî¢ –ö–æ–¥: <code>{unique_code}</code>\n\n"
                status_message += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/3 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π\n"
                
                progress_bar = "".join(['üü¢' if c else '‚ö™' for c in conditions])
                status_message += f"{progress_bar}\n\n"
                
                status_message += "<b>–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:</b>\n"
                for i, condition in enumerate(conditions, 1):
                    status = "‚úÖ" if condition else "‚ùå"
                    activity_name = self.MAP_DOT_NAME[f'–ê–∫—Ç{i}']
                    status_message += f"{status} {activity_name}\n"

                if completed < 3:
                    status_message += "\nüí° <i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ö–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π¬ª "
                    status_message += "—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫.</i>"
                else:
                    status_message += "\nüéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!</b>"

                await self.safe_edit_message(
                    context,
                    chat_id,
                    main_message_id,
                    status_message,
                    reply_markup,
                    parse_mode="HTML"
                )

        except Exception as e:
            error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
            logger.error(f"Error in show_user_status for user {user_id}: {str(e)}")
            await self.safe_edit_message(
                context,
                chat_id,
                main_message_id,
                error_msg,
                reply_markup
            )

    async def show_volunteers_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        main_message_id = self.get_main_message_id(user_id)

        if self.get_user_role(user_id) != '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä':
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await self.safe_edit_message(
                context,
                chat_id,
                main_message_id,
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
                reply_markup
            )
            return

        try:
            with sqlite3.connect('bot_database.db') as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT 
                        u.telegram_tag,
                        u.unique_code,
                        u.animal_code,
                        vg.volunteer_group,
                        u.full_name
                    FROM Users u
                    JOIN VolunteerGroups vg ON vg.user_id = u.id
                    WHERE u.role = ?
                    ORDER BY vg.volunteer_group, u.animal_code
                ''', ('–í–æ–ª–æ–Ω—Ç—ë—Ä',))
                volunteers = cursor.fetchall()

                if not volunteers:
                    buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
                    reply_markup = InlineKeyboardMarkup(buttons)
                    await self.safe_edit_message(
                        context,
                        chat_id,
                        main_message_id,
                        "üìù –°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ –ø—É—Å—Ç.",
                        reply_markup
                    )
                    return

                message = "üìã <b>–°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤:</b>\n\n"
                buttons = []
                
                current_group = None
                for tag, code, animal, group, full_name in volunteers:
                    if current_group != group:
                        current_group = group
                        message += f"\n<b>–ì—Ä—É–ø–ø–∞ {group}:</b>\n"
                    
                    condition_field = self.GROUP_TO_CONDITION[group]
                    cursor.execute(f'''
                        SELECT COUNT(*) 
                        FROM ContestLogs 
                        WHERE telegram_tag = ? 
                        AND {condition_field} = 1
                    ''', (tag,))
                    marks_count = cursor.fetchone()[0]
                    
                    activity_name = self.get_activity_name(condition_field)
                    message += f"üë§ {animal} ({code}) - {full_name} - {marks_count} –æ—Ç–º–µ—Ç–æ–∫\n"
                    
                    buttons.append([
                        InlineKeyboardButton(
                            f"{group} | {animal}",
                            callback_data=f"volunteer_info_{code}"
                        )
                    ])

                buttons.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')])
                reply_markup = InlineKeyboardMarkup(buttons)

                await self.safe_edit_message(
                    context,
                    chat_id,
                    main_message_id,
                    message,
                    reply_markup,
                    parse_mode="HTML"
                )

        except Exception as e:
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤: {str(e)}"
            print(f"Error in show_volunteers_list: {str(e)}")
            await self.safe_edit_message(
                context,
                chat_id,
                main_message_id,
                error_message,
                reply_markup
            )

    async def show_volunteer_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, volunteer_code: str):
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        main_message_id = self.get_main_message_id(user_id)

        try:
            with sqlite3.connect('bot_database.db') as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT 
                        u.telegram_tag,
                        u.unique_code,
                        u.animal_code,
                        vg.volunteer_group,
                        u.id,
                        u.full_name
                    FROM Users u
                    JOIN VolunteerGroups vg ON vg.user_id = u.id
                    WHERE u.unique_code = ?
                ''', (volunteer_code,))
                volunteer = cursor.fetchone()

                if not volunteer:
                    await query.answer("‚ùå –í–æ–ª–æ–Ω—Ç—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return

                tag, code, animal, group, user_id_db, full_name = volunteer
                condition_field = self.GROUP_TO_CONDITION[group]
                activity_name = self.get_activity_name(condition_field)

                cursor.execute(f'''
                    SELECT COUNT(*) 
                    FROM ContestLogs 
                    WHERE {condition_field} = 1
                    AND telegram_tag = ?
                ''', (tag,))
                marks_count = cursor.fetchone()[0]

                message = f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–µ:</b>\n\n"
                message += f"üè∑ –ü–æ–∑—ã–≤–Ω–æ–π: <code>{animal}</code>\n"
                message += f"üî¢ –ö–æ–¥: <code>{code}</code>\n"
                message += f"üë§ –¢–µ–≥: {tag}\n"
                message += f"üìç –ì—Ä—É–ø–ø–∞: {group}\n"
                message += f"üìõ –§–ò–û: {full_name}\n"
                message += f"üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_name}\n"
                message += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—Ç–æ–∫: {marks_count}\n"

                buttons = [
                    [InlineKeyboardButton("‚ùå –°–Ω—è—Ç—å —Å —Ä–æ–ª–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞", callback_data=f"remove_volunteer_{code}")],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤", callback_data="show_volunteers")],
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(buttons)

                await self.safe_edit_message(
                    context,
                    chat_id,
                    main_message_id,
                    message,
                    reply_markup,
                    parse_mode="HTML"
                )

        except Exception as e:
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await self.safe_edit_message(
                context,
                chat_id,
                main_message_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–µ: {str(e)}",
                reply_markup
            )

    async def remove_volunteer_role(self, update: Update, context: ContextTypes.DEFAULT_TYPE, volunteer_code: str):
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        main_message_id = self.get_main_message_id(user_id)

        if self.get_user_role(user_id) != '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä':
            await query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
            return

        try:
            with sqlite3.connect('bot_database.db') as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT u.animal_code, u.id, vg.volunteer_group
                    FROM Users u
                    LEFT JOIN VolunteerGroups vg ON vg.user_id = u.id
                    WHERE u.unique_code = ?
                ''', (volunteer_code,))
                result = cursor.fetchone()
                
                if not result:
                    await query.answer("‚ùå –í–æ–ª–æ–Ω—Ç—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return

                animal_code, vol_user_id, volunteer_group = result

                cursor.execute('DELETE FROM VolunteerGroups WHERE user_id = ?', (vol_user_id,))
                
                cursor.execute('''
                    UPDATE Users 
                    SET role = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                    WHERE id = ?
                ''', (vol_user_id,))
                
                conn.commit()

            self.log_action(
                user_id,
                f"–£–¥–∞–ª–∏–ª —Ä–æ–ª—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {animal_code} ({volunteer_code}) –∏–∑ –≥—Ä—É–ø–ø—ã {volunteer_group}"
            )

            buttons = [
                [InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤", callback_data="show_volunteers")],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="return_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)

            await self.safe_edit_message(
                context,
                chat_id,
                main_message_id,
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {animal_code} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —Å —Ä–æ–ª–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞",
                reply_markup
            )

        except Exception as e:
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await self.safe_edit_message(
                context,
                chat_id,
                main_message_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞: {str(e)}",
                reply_markup
            )

    async def stat_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        main_message_id = self.get_main_message_id(user_id)
        
        if not main_message_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return
            
        role = self.get_user_role(user_id)
        
        if role != '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä':
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=main_message_id,
                text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
                reply_markup=reply_markup
            )
            return

        self.log_action(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stat")
        
        with sqlite3.connect('bot_database.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT 
                    cl.animal_code,
                    cl.telegram_tag,
                    (cl.condition1 + cl.condition2 + cl.condition3 + cl.condition4 + cl.condition5) as completed_conditions
                FROM ContestLogs cl
                ORDER BY completed_conditions DESC
                LIMIT 10
            ''')
            stats = cursor.fetchall()

        if not stats:
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=main_message_id,
                text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
                reply_markup=reply_markup
            )
            return

        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞:\n\n"
        for animal_code, telegram_tag, completed in stats:
            response += f"üè∑ {animal_code} | {telegram_tag or '–ù–µ—Ç —Ç–µ–≥–∞'} | {completed}/5 ‚úÖ \n\n"
        
        buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
        reply_markup = InlineKeyboardMarkup(buttons)
        
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=main_message_id,
            text=response,
            reply_markup=reply_markup
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat.id

        with sqlite3.connect('bot_database.db') as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT main_message_id, map_message_id, event_message_id FROM UserMainMessages WHERE telegram_id = ?', (user_id,))
            row = cursor.fetchone()
            if row:
                main_message_id, map_message_id, event_message_id = row
            else:
                await query.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", show_alert=True)
                return

        if query.data == 'return_to_main':
            if map_message_id:
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=map_message_id)
                    cursor.execute('UPDATE UserMainMessages SET map_message_id = NULL WHERE telegram_id = ?', (user_id,))
                    conn.commit()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã: {e}")

            if event_message_id:
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=event_message_id)
                    cursor.execute('UPDATE UserMainMessages SET event_message_id = NULL WHERE telegram_id = ?', (user_id,))
                    conn.commit()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: {e}")

            role = self.get_user_role(user_id)
            cursor.execute('''
                SELECT cl.animal_code, u.unique_code, cl.condition1, cl.condition2, cl.condition3 
                FROM ContestLogs cl
                JOIN Users u ON u.telegram_tag = cl.telegram_tag
                WHERE u.telegram_id = ?
            ''', (user_id,))
            animal_code, unique_code, *conditions = cursor.fetchone()

            welcome_message = self.welc_msg(animal_code, unique_code)

            buttons = [
                [InlineKeyboardButton("–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", callback_data='get_event1')],
            ]
            
            if sum(conditions) < 3 and role != '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä' and role != '–í–æ–ª–æ–Ω—Ç—ë—Ä':
                buttons.append([InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data='get_map')])
                completed_conditions = sum(conditions)
                if completed_conditions == 3:
                    progress_msg = "\nüéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                else:
                    progress_msg = f"\nüéà –í—ã –ø—Ä–æ—à–ª–∏ {completed_conditions} –∏–∑ 3 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π."
                welcome_message += progress_msg
        
            
            if role == '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä':
                buttons.append([InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='get_stat')])
                buttons.append([InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤", callback_data='show_volunteers')])
                buttons.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞", callback_data='add_volunteer')])
                buttons.append([InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å —É—Å–ª–æ–≤–∏–µ", callback_data='mark_condition')])
                buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É", callback_data='unmark_condition')])
            elif role == '–í–æ–ª–æ–Ω—Ç—ë—Ä':
                buttons.append([InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å —É—Å–ª–æ–≤–∏–µ", callback_data='mark_condition')])
                buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É", callback_data='unmark_condition')])

            if role == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
                buttons.append([InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data='show_status')])

            reply_markup = InlineKeyboardMarkup(buttons)

            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=main_message_id,
                text=welcome_message,
                reply_markup=reply_markup
            )

        elif query.data == 'cancel_mark_condition':
            await self.cancel_action(update, context, 'mark')
        elif query.data.startswith('cancel_mark_condition_'):
            await self.cancel_action(update, context, 'mark')
        elif query.data == 'cancel_add_volunteer':
            await self.cancel_action(update, context, 'add_volunteer')
        elif query.data == 'show_status':
            await self.show_user_status(update, context)
        elif query.data.startswith('mark_user_'):
            unique_code = query.data.replace('mark_user_', '')
            await self.handle_mark_user_callback(update, context, unique_code)
        elif query.data.startswith('unmark_user_'):
            data = query.data.replace('unmark_user_', '')
            await self.handle_unmark_user_callback(update, context, data)
        elif query.data == 'show_volunteers':
            await self.show_volunteers_list(update, context)
        elif query.data.startswith('volunteer_info_'):
            volunteer_code = query.data.replace('volunteer_info_', '')
            await self.show_volunteer_info(update, context, volunteer_code)
        elif query.data.startswith('remove_volunteer_'):
            volunteer_code = query.data.replace('remove_volunteer_', '')
            await self.remove_volunteer_role(update, context, volunteer_code)
        elif query.data == 'get_map':
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)

            with sqlite3.connect('bot_database.db') as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT condition1, condition2, condition3 FROM ContestLogs cl
                    JOIN Users u ON u.telegram_tag = cl.telegram_tag
                    WHERE u.telegram_id = ?
                ''', (user_id,))
                conditions = cursor.fetchone()

            image_path = 'MAP.jpeg'

            sent_message = await context.bot.send_photo(
                chat_id=chat_id,
                photo=open(image_path, 'rb'),
                caption=self.crd_msg(conditions),
                reply_markup=reply_markup,
                parse_mode="HTML"
            )

            with sqlite3.connect('bot_database.db') as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE UserMainMessages SET map_message_id = ? WHERE telegram_id = ?', (sent_message.message_id, user_id))
                conn.commit()

            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=main_message_id,
                text="üîΩ –ö–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–Ω–∏–∑—É.",
                reply_markup=None
            )
        elif query.data == 'get_event1':
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)

            image_path = 'EVENT1.jpeg'

            sent_message = await context.bot.send_photo(
                chat_id=chat_id,
                photo=open(image_path, 'rb'),
                caption="‚ÑπÔ∏è <b>–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏:</b>\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ...",
                reply_markup=reply_markup,
                parse_mode="HTML"
            )

            with sqlite3.connect('bot_database.db') as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE UserMainMessages SET event_message_id = ? WHERE telegram_id = ?', (sent_message.message_id, user_id))
                conn.commit()

            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=main_message_id,
                text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–Ω–∏–∑—É.",
                reply_markup=None
            )
        elif query.data == 'get_stat':
            await self.stat_command(update, context)
        elif query.data == 'add_volunteer':
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=main_message_id,
                reply_markup=reply_markup,
                text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_volunteer <–∫–æ–¥ –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π> <–≥—Ä—É–ø–ø–∞>"
            )
        elif query.data == 'mark_condition':
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=main_message_id,
                reply_markup=reply_markup,
                text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /mark <–∫–æ–¥ –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π> <—É—Å–ª–æ–≤–∏–µ>"
            )
        elif query.data == 'unmark_condition':
            buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
            reply_markup = InlineKeyboardMarkup(buttons)
            role = self.get_user_role(user_id)
            
            if role == '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä':
                message = (
                    f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /unmark <–∫–æ–¥ –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π> <–≥—Ä—É–ø–ø–∞>\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {', '.join(sorted(self.VOLUNTEER_GROUPS))}\n–ü—Ä–∏–º–µ—Ä: /unmark –õ–∏—Å–∞#1 –ê"
                )
            else:
                message = (
                    f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /unmark <–∫–æ–¥ –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π>\n–ü—Ä–∏–º–µ—Ä: /unmark –õ–∏—Å–∞#123"
                )
            
            await self.safe_edit_message(
                context,
                chat_id,
                main_message_id,
                message,
                reply_markup
            )            

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        telegram_tag = f"@{username}" if username else None

        self.add_user(user_id, username, telegram_tag)
        self.log_action(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
        
        with sqlite3.connect('bot_database.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT cl.animal_code, u.unique_code, cl.condition1, cl.condition2, cl.condition3 
                FROM ContestLogs cl
                JOIN Users u ON u.telegram_tag = cl.telegram_tag
                WHERE u.telegram_id = ?
            ''', (user_id,))
            animal_code, unique_code, *conditions = cursor.fetchone()

        welcome_message = self.welc_msg(animal_code, unique_code)
        
        role = self.get_user_role(user_id)
        buttons = [
            [InlineKeyboardButton("–û –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", callback_data='get_event1')],
        ]

        if role == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
            buttons.append([InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data='show_status')])

        if sum(conditions) < 3 and role != '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä' and role != '–í–æ–ª–æ–Ω—Ç—ë—Ä':
            buttons.append([InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data='get_map')])
            completed_conditions = sum(conditions)
            if completed_conditions == 3:
                progress_msg = "\nüéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            else:
                progress_msg = f"\nüéà –í—ã –ø—Ä–æ—à–ª–∏ {completed_conditions} –∏–∑ 3 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π."
            welcome_message += progress_msg
        
        
        if role == '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä':
            buttons.append([InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='get_stat')])
            buttons.append([InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤", callback_data='show_volunteers')])
            buttons.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞", callback_data='add_volunteer')])
            buttons.append([InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å —É—Å–ª–æ–≤–∏–µ", callback_data='mark_condition')])
            buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É", callback_data='unmark_condition')])
        elif role == '–í–æ–ª–æ–Ω—Ç—ë—Ä':
            buttons.append([InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å —É—Å–ª–æ–≤–∏–µ", callback_data='mark_condition')])
            buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É", callback_data='unmark_condition')])

        reply_markup = InlineKeyboardMarkup(buttons)
        message = await update.message.reply_text(welcome_message, reply_markup=reply_markup)
        
        with sqlite3.connect('bot_database.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO UserMainMessages (telegram_id, main_message_id)
                VALUES (?, ?)
            ''', (user_id, message.message_id))
            conn.commit()

        try:
            await update.message.delete()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")

    async def add_volunteer_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
        reply_markup = InlineKeyboardMarkup(buttons)
        main_message_id = self.get_main_message_id(user_id)
        if not main_message_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return
        
        if self.get_user_role(user_id) != '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä':
            await self.safe_edit_message(
                context,
                update.effective_chat.id,
                main_message_id,
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
                reply_markup
            )
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")
            return

        if len(context.args) != 2:
            await self.safe_edit_message(
                context,
                update.effective_chat.id,
                main_message_id,
                (
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/add_volunteer &lt;–∫–æ–¥ –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π&gt; &lt;–≥—Ä—É–ø–ø–∞&gt;</code>\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {', '.join(sorted(self.VOLUNTEER_GROUPS))}\n"
                    "–ü—Ä–∏–º–µ—Ä: <code>/add_volunteer 12345 –ê</code>"
                ),
                reply_markup,
                parse_mode="HTML"
            )
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")
            return

        try:
            volunteer_code_or_call_sign = self.standardize_call_sign(context.args[0])
            volunteer_group = context.args[1].upper()

            if volunteer_group not in self.VOLUNTEER_GROUPS:
                await self.safe_edit_message(
                    context,
                    update.effective_chat.id,
                    main_message_id,
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {', '.join(sorted(self.VOLUNTEER_GROUPS))}",
                    reply_markup,
                    parse_mode="HTML"
                )
                try:
                    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")
                return

            with sqlite3.connect('bot_database.db') as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT id, telegram_tag 
                    FROM Users 
                    WHERE LOWER(unique_code) = ? OR LOWER(animal_code) = ?
                ''', (volunteer_code_or_call_sign, volunteer_code_or_call_sign))
                user_data = cursor.fetchone()
                
                if not user_data:
                    await self.safe_edit_message(
                        context,
                        update.effective_chat.id,
                        main_message_id,
                        "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        reply_markup,
                        parse_mode="HTML"
                    )
                    return

                user_id_db, telegram_tag = user_data

                cursor.execute('''
                    UPDATE Users 
                    SET role = '–í–æ–ª–æ–Ω—Ç—ë—Ä'
                    WHERE id = ?
                ''', (user_id_db,))

                cursor.execute('DELETE FROM VolunteerGroups WHERE user_id = ?', (user_id_db,))
                cursor.execute('''
                    INSERT INTO VolunteerGroups (user_id, volunteer_group)
                    VALUES (?, ?)
                ''', (user_id_db, volunteer_group))

                conn.commit()

                self.log_action(user_id, f"–î–æ–±–∞–≤–ª–µ–Ω –≤–æ–ª–æ–Ω—Ç–µ—Ä (–ö–æ–¥ –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π: {volunteer_code_or_call_sign}) –≤ –≥—Ä—É–ø–ø—É {volunteer_group}")
                
                buttons = [
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", callback_data='cancel_add_volunteer')]
                ]
                reply_markup = InlineKeyboardMarkup(buttons)
                
                await self.safe_edit_message(
                    context,
                    update.effective_chat.id,
                    main_message_id,
                    (
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤–æ–ª–æ–Ω—Ç–µ—Ä!\n"
                        f"–ö–æ–¥ –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π: {volunteer_code_or_call_sign}\n"
                        f"–ì—Ä—É–ø–ø–∞: {volunteer_group}"
                    ),
                    reply_markup,
                    parse_mode="HTML"
                )

        except sqlite3.Error as e:
            await self.safe_edit_message(
                context,
                update.effective_chat.id,
                main_message_id,
                f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                reply_markup,
                parse_mode="HTML"
            )

        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")

    async def mark_condition_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')]]
        reply_markup = InlineKeyboardMarkup(buttons)
        main_message_id = self.get_main_message_id(user_id)
        
        if not main_message_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return
        
        role = self.get_user_role(user_id)
        if role not in ['–í–æ–ª–æ–Ω—Ç—ë—Ä', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä']:
            await self.safe_edit_message(
                context,
                update.effective_chat.id,
                main_message_id,
                "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.",
                reply_markup
            )
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")
            return

        if role == '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä' and len(context.args) != 2:
            await self.safe_edit_message(
                context,
                update.effective_chat.id,
                main_message_id,
                (
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/mark &lt;–∫–æ–¥ –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π&gt; &lt;–≥—Ä—É–ø–ø–∞&gt;</code>\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {', '.join(sorted(self.VOLUNTEER_GROUPS))}"
                ),
                reply_markup,
                parse_mode="HTML"
            )
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")
            return
        elif role == '–í–æ–ª–æ–Ω—Ç—ë—Ä' and len(context.args) != 1:
            await self.safe_edit_message(
                context,
                update.effective_chat.id,
                main_message_id,
                (
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/mark &lt;–∫–æ–¥ –∏–ª–∏ –ø–æ–∑—ã–≤–Ω–æ–π&gt;</code>"
                ),
                reply_markup,
                parse_mode="HTML"
            )
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")
            return

        try:
            target_code_or_call_sign = self.standardize_call_sign(context.args[0])

            with sqlite3.connect('bot_database.db') as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT u.id, u.telegram_tag, cl.id as contest_log_id
                    FROM Users u
                    LEFT JOIN ContestLogs cl ON u.telegram_tag = cl.telegram_tag
                    WHERE LOWER(u.unique_code) = ? OR LOWER(u.animal_code) = ?
                ''', (target_code_or_call_sign, target_code_or_call_sign))
                
                target_user = cursor.fetchone()
                if not target_user:
                    await self.safe_edit_message(
                        context,
                        update.effective_chat.id,
                        main_message_id,
                        "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        reply_markup,
                        parse_mode="HTML"
                    )
                    return
                
                target_user_id, target_telegram_tag, contest_log_id = target_user
                
                if role == "–í–æ–ª–æ–Ω—Ç—ë—Ä":
                    cursor.execute('SELECT id FROM Users WHERE telegram_id = ?', (user_id,))
                    user_db_id = cursor.fetchone()
                    
                    if not user_db_id:
                        await self.safe_edit_message(
                            context,
                            update.effective_chat.id,
                            main_message_id,
                            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                            reply_markup,
                            parse_mode="HTML"
                        )
                        return
                        
                    cursor.execute('''
                        SELECT volunteer_group 
                        FROM VolunteerGroups 
                        WHERE user_id = ?
                    ''', (user_db_id[0],))
                    volunteer_group_data = cursor.fetchone()
                    
                    if not volunteer_group_data:
                        await self.safe_edit_message(
                            context,
                            update.effective_chat.id,
                            main_message_id,
                            "‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –≥—Ä—É–ø–ø–µ.",
                            reply_markup,
                            parse_mode="HTML"
                        )
                        return
                    
                    volunteer_group = volunteer_group_data[0]
                    condition_field = self.GROUP_TO_CONDITION[volunteer_group]
                else:
                    volunteer_group = context.args[1].upper()
                    if volunteer_group not in self.VOLUNTEER_GROUPS:
                        await self.safe_edit_message(
                            context,
                            update.effective_chat.id,
                            main_message_id,
                            f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {', '.join(sorted(self.VOLUNTEER_GROUPS))}",
                            reply_markup,
                            parse_mode="HTML"
                        )
                        return
                    condition_field = self.GROUP_TO_CONDITION[volunteer_group]

                cursor.execute(f'''
                    UPDATE ContestLogs 
                    SET {condition_field} = 1
                    WHERE telegram_tag = ?
                ''', (target_telegram_tag,))
                
                conn.commit()
                
                self.log_action(
                    user_id,
                    f"{role} –æ—Ç–º–µ—Ç–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ¬´{self.get_activity_name(condition_field)}¬ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_code_or_call_sign}"
                )

                
                buttons = [
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='return_to_main')],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ—Ç–∫–∏", callback_data='cancel_mark_condition')]
                ]
                reply_markup = InlineKeyboardMarkup(buttons)
                
                activity_name = self.get_activity_name(condition_field)
                await self.safe_edit_message(
                    context,
                    update.effective_chat.id,
                    main_message_id,
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ¬´{activity_name}¬ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_code_or_call_sign}",
                    reply_markup,
                    parse_mode="HTML"
                )

        except sqlite3.Error as e:
            await self.safe_edit_message(
                context,
                update.effective_chat.id,
                main_message_id,
                f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                reply_markup,
                parse_mode="HTML"
            )

        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")

    def run(self):
        application = Application.builder().token(self.token).build()
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("add_volunteer", self.add_volunteer_command))
        application.add_handler(CommandHandler("mark", self.mark_condition_command))
        application.add_handler(CommandHandler("unmark", self.unmark_condition_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_volunteer_search))
        application.add_handler(CallbackQueryHandler(self.button_callback))
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

if __name__ == '__main__':

    logging.basicConfig(
        level=logging.ERROR,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('bot_errors.log', encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    logger = logging.getLogger(__name__)

    def run_bot_with_restart():
        while True:
            try:
                logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
                bot = Bot()
                bot.run()
            except Exception as e:
                error_time = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
                error_msg = f"""
                ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:
                –í—Ä–µ–º—è: {error_time} UTC
                –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}
                –û–ø–∏—Å–∞–Ω–∏–µ: {str(e)}
                Traceback:
                {traceback.format_exc()}
                """
                logger.error(error_msg)
                
                print(f"\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ {error_time} UTC")
                continue

    try:
        run_bot_with_restart()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
        sys.exit(0)
                   
